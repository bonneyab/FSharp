namespace FSharpEulerProblems

//Multiples of 3 and 5
//Problem 1
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
module Problem1 =
  let GetSumOfMultiplesBelowNumber multiples number = 
    [1..number-1] |> List.filter(fun o -> multiples |> Seq.exists(fun n -> o % n = 0)) |> List.sum


//Even Fibonacci numbers
//Problem 2
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
module Problem2 =
  let FibonacciGetSumBelowMax max =
    let rec fibonacciSumBelowMaxWithTotal prev current total =
      let next = prev + current
      if next > max 
        then total
      else fibonacciSumBelowMaxWithTotal current next (if next % 2 = 0 then total + next else total)
    fibonacciSumBelowMaxWithTotal 0 1 0